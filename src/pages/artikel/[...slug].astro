---
import { type CollectionEntry, getCollection, getEntry } from "astro:content"
import BaseLayout from "@layouts/BaseLayout.astro"
import Button from "@components/Button.astro"
import Meta from "@components/Meta.astro"
import PostPreview from "@components/PostPreview.astro"
import Subscribe from "@components/Subscribe.astro"
import { sortItemsByDateDesc } from "@utils/data-utils"
import { slugify } from "@utils/common-utils"

export async function getStaticPaths() {
  const posts = (await getCollection("artikel")).sort(sortItemsByDateDesc)
  const postCount = posts.length
  return posts.map((post: CollectionEntry<"artikel">, index: number) => ({
    params: { slug: post.slug },
    props: {
      post,
      prevPost: index + 1 !== postCount ? posts[index + 1] : null,
      nextPost: index !== 0 ? posts[index - 1] : null,
    },
  }))
}

type Props = {
  post: CollectionEntry<"artikel">
  prevPost: CollectionEntry<"artikel">
  nextPost: CollectionEntry<"artikel">
}

const { href } = Astro.url
const { post, prevPost, nextPost } = Astro.props
const { title, description, publication, seo, tags = [] } = post.data
const { Content } = await post.render()
const { name, description: summary } = (await getEntry(
  "publikationen",
  slugify(publication)
))!.data
---

<BaseLayout
  title={seo?.title ?? title}
  description={seo?.description ?? description}
  pageType="article"
  showHeader={false}
>
  <article class="mb-16 sm:mb-24">
    <Meta class="mb-16 text-sm" post={post} />
    <div
      class="max-w-none prose prose-dante sm:prose-lg prose-h1:font-serif prose-h1:text-3xl prose-h1:leading-tight prose-h1:sm:text-5xl prose-h1:sm:leading-tight"
    >
      <Content />
    </div>
    <div
      class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base"
    >
      {
        tags.sort().length > 0 && (
          <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
            {tags.map((tag: string) => (
              <a
                class="text-main hover:underline"
                href={`/tags/${slugify(tag)}`}
              >
                #{tag}
              </a>
            ))}
          </div>
        )
      }
      <Button
        class="copy-url-button"
        aria-label="Link kopieren"
        data-url={href}
        data-tooltip-default="Link kopieren"
        data-tooltip-success="Link kopiert">Artikel teilen</Button
      >
    </div>
  </article>
  <div class="my-16 sm:my-24">
    <h2 class="mb-3 text-2xl font-serif italic sm:mb-16 sm:text-2xl">
      {name}
    </h2>
    <div class="mb-10 sm:mb-12">{summary}</div>
  </div>
  {
    (prevPost || nextPost) && (
      <div class="my-16 sm:my-24">
        <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">
          Weitere Artikel
        </h2>
        {nextPost && (
          <PostPreview
            post={nextPost}
            class="mb-10 sm:mb-12"
            headingLevel="h3"
          />
        )}
        {prevPost && (
          <PostPreview
            post={prevPost}
            class="mb-10 sm:mb-12"
            headingLevel="h3"
          />
        )}
      </div>
    )
  }
  <Subscribe class="my-16 sm:my-24" />
</BaseLayout>

<script>
  document.addEventListener("astro:page-load", () => {
    const copyUrlButton = document.querySelector(
      ".copy-url-button"
    ) as HTMLButtonElement
    copyUrlButton?.addEventListener("click", async () => {
      await copyUrl(copyUrlButton)
    })

    async function copyUrl(button: HTMLButtonElement) {
      const url = button.getAttribute("data-url") || ""
      const label = button.innerText

      await navigator.clipboard.writeText(url)

      button.innerText = "Link Kopiert"

      setTimeout(() => {
        button.innerText = label
      }, 2500)
    }
  })
</script>
